{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\ncolorsensor Color3 = colorsensor(PORT3);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Sample Program 1 - Timers\n// Sample1.c\n// RobotC\n\n// Description:\n// ----------------------------------------------------------------------\n// This program turn the Robot into a timer/stopwatch.\n// The robot displays:\n// - TIME: time in minutes, seconds and milliseconds from start/reset\n// - The last time the Touch Sensor S1 was changed\n//   - UP: the last time the sensor was released\n//   - DOWN: the last time the sensor was pressed\n// - HELD: the time since the touch sensor was pressed and released\n// ----------------------------------------------------------------------\n\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n//configure touch sensor to port 8\nbumper bumpSensor(PORT8);\n\n// set up timer\ntimer timer1;\n\n// message headers\nconst char* MESSAGES[4] = {\"Time:\", \"  UP:\", \"DOWN:\", \"HELD:\"};\n\nvoid displayString(int line, const char* message)\n{\n  Brain.Screen.setCursor(line,1);\n  Brain.Screen.clearLine();\n  Brain.Screen.print(message);\n\n}\n\n// displays time converted from milliseconds to min seconds.milliseconds\nvoid displayTime(int line, int t_milliseconds, int index_message)\n{\n\tint t_min = (t_milliseconds / 1000) / 60;\n\tfloat t_seconds = (t_milliseconds - (t_min * 60 * 1000))/1000.0;\n  Brain.Screen.setCursor(line,1);\n  Brain.Screen.clearLine();\n  Brain.Screen.print(\"%s %d %.3f\", MESSAGES[index_message], t_min, t_seconds);\n}\n\nint main()\n{\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n\n\t// Press button to start\n  displayString(1,\"Bumper Timer\");\n\tdisplayString(3,\"Press Check\");\n  displayString(4,\"to start\");\n  wait(50,msec);\n  while(!Brain.buttonCheck.pressing())\n  {}\n  while(Brain.buttonCheck.pressing())\n  {}\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n\n\t// Display commands and helper messages\n\tdisplayString(5, \"< Reset  > STOP\");\n\ttimer1.clear(); // reset clock\n\n\tint lastTouchStatus = bumpSensor.pressing();  // get the current state of the touch button\n\tint lastTime[2] = {0,0}; // time when the sensor changed to that value\n\tint timePressed = 0; // tile that the button was on 1 for\n\n\t// display initial set of zero times\n\tdisplayTime(2, lastTime[0], 1);\n\tdisplayTime(3, lastTime[1], 2);\n\tdisplayTime(4, timePressed, 3);\n\n  int count = 0;\n\twhile(!Brain.buttonRight.pressing())\n\t{\n    if (count == 0)\n  \t\tdisplayTime(1,timer1.time(msec),0);  // display time\n    count = ++count % 500;\n\n\t\t// test is the status of the sensor has changed\n\t\tif (lastTouchStatus != bumpSensor.pressing())\n\t\t{\n\t\t\tlastTouchStatus = bumpSensor.pressing();\n\t\t\tlastTime[lastTouchStatus] = timer1.time(msec);\n\t\t\t// if the button is up == 0, then display the duration of its down time\n\t\t\tif (lastTouchStatus == 0)\n\t\t\t{\n\t\t\t\ttimePressed = lastTime[0] - lastTime[1];\n\t\t\t}\n\n\t\t\t// Update the displays: not pressed [1], pressed [2], duration [3]\n\t\t\tdisplayTime(2, lastTime[0], 1);\n\t\t\tdisplayTime(3, lastTime[1], 2);\n\t\t\tdisplayTime(4, timePressed, 3);\n\t\t}\n    \n\t\t// reset timers of right button pressed\n\t\tif (Brain.buttonLeft.pressing())\n\t\t{\n\t\t\t// reset stored times\n\t\t\tlastTime[0] = 0;\n\t\t\tlastTime[1] = 0;\n\t\t\ttimePressed = 0;\n\n\t\t\t// reset display\n\t\t\tdisplayTime(2, lastTime[0], 1);      // 1 - message UP\n\t\t\tdisplayTime(3, lastTime[1], 2);  // 2 - message DOWN\n\t\t\tdisplayTime(4, timePressed, 3);  // 3 - message HELD\n\n\t\t\t// reset lat sensor value\n\t\t\tlastTouchStatus = bumpSensor.pressing();\n\n\t\t\t// reset timer\n\t\t\ttimer1.clear();\n\t\t}\n\t} // end while\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n\n  return EXIT_SUCCESS;  \n}\n","textLanguage":"cpp","robotConfig":[{"port":[3],"name":"Color3","customName":false,"deviceType":"Color","deviceClass":"colorsensor","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}