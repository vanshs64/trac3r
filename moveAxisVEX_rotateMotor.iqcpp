{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Motor1 = motor(PORT1, false);\nmotor Motor2 = motor(PORT2, false);\nmotor Motor7 = motor(PORT7, false);\nmotor Motor8 = motor(PORT8, false);\nmotor Motor11 = motor(PORT11, false);\nmotor Motor12 = motor(PORT12, false);\nbumper Bumper3 = bumper(PORT3);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nconst int RESOLUTION = 5; // degrees\nconst int MAX_STEPS = 1000;\nconst int INITIALIZE_SPEED = 15;\n\nfloat XYPoints[MAX_STEPS][2] = {0}; // array of interval points\n\n// requires array of size (limitx/#intervals) and (limity/#intervals) initialized outside of this\n// X is the max size of the width of the plane (degrees)\n// Y is the max size of the length of the plane (degrees)\nvoid generatePaths(float planePoints[MAX_STEPS][2], int stepSize, float X, float Y) {\n  // row\n  int num_points_X = floor(X / stepSize) + 1;\n  int num_points_Y = floor(Y / stepSize) + 1;\n\n  int index = 0;\n\n  for (int i = 0; i < num_points_X-1; i++) {\n    // col\n    for (int j = 0; j < num_points_Y-1; j++) {\n\n      if (index < MAX_STEPS) { // Ensure not overflow num points of max array size MAX_STEPS\n\n        planePoints[index][0] = i * stepSize;\n        planePoints[index][1] = j * stepSize;\n\n      }\n\n    }\n      \n  }\n\n}\n\n\n// wait for bumper press, once press move all motor to lowest range set encoders to zero.\nvoid initializeEncoders(int limitSwitches[3]) {\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor1.setVelocity(INITIALIZE_SPEED, percent); // leadscrew\n    Motor2.setVelocity(INITIALIZE_SPEED, percent);\n    Motor7.setVelocity(-INITIALIZE_SPEED, percent); // baseplate\n    Motor8.setVelocity(INITIALIZE_SPEED, percent);\n    Motor11.setVelocity(INITIALIZE_SPEED, percent); // rack\n    Motor12.setVelocity(INITIALIZE_SPEED, percent);\n\n    // LEADSCREW\n    Motor1.spin(forward);\n    Motor2.spin(forward);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // set leadscrew zero\n    Motor1.stop();\n    Motor2.stop();\n    Motor1.setPosition(0, degrees);\n    Motor2.setPosition(0, degrees);\n    Motor1.spin(reverse);\n    Motor2.spin(reverse);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    \n    Motor1.stop();\n    Motor2.stop();\n\n    // set limit\n    int leadscrew_limit = Motor1.position(degrees);\n\n\n    // BED PLATE\n    Motor7.spin(forward);\n    Motor8.spin(forward);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // set bedplate zero\n    Motor7.stop();\n    Motor8.stop();\n    Motor7.setPosition(0, degrees);\n    Motor8.setPosition(0, degrees);\n    Motor7.spin(reverse);\n    Motor8.spin(reverse);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor7.stop();\n    Motor8.stop();\n\n    // set limit\n    int bedplate_limit = Motor7.position(degrees);\n\n    // RACK AND PINION\n    Motor11.spin(forward);\n    Motor12.spin(forward);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // set bedplate zero\n    Motor11.stop();\n    Motor12.stop();\n    Motor11.setPosition(0, degrees);\n    Motor12.setPosition(0, degrees);\n    Motor11.spin(reverse);\n    Motor12.spin(reverse);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor11.stop();\n    Motor12.stop();\n\n    // set limit\n    int rack_limit = Motor11.position(degrees);\n    \n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);  // move current position of printer to line 1, column 1\n    Brain.Screen.print(\"LS: %.2f deg\", Motor1.position(degrees));\n\n    Brain.Screen.setCursor(2, 1);\n    Brain.Screen.print(\"BED: %.2f deg\", Motor7.position(degrees));\n\n    Brain.Screen.setCursor(3, 1);\n    Brain.Screen.print(\"RACK: %.2f deg\", Motor11.position(degrees));\n\n    // Leadscrew RESULT == 755 degrees (negative, going down from the top)\n    // Base RESULT == 485 degrees\n\n    // Save encoder values\n    limitSwitches[0] = Motor1.position(degrees);\n    limitSwitches[1] = Motor7.position(degrees);\n    limitSwitches[2] = Motor11.position(degrees);\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n\n  // Find limit switches\n  int limitSwitches[3] = {0};\n\n  initializeEncoders(limitSwitches);\n\n\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[2],"name":"Motor2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[7],"name":"Motor7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[8],"name":"Motor8","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[11],"name":"Motor11","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[12],"name":"Motor12","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}},{"port":[3],"name":"Bumper3","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}