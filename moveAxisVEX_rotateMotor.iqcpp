{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nvoid moveAxis(string axis, int power, float distance, float intervalDistance, float waitTime) {\n  float currentPosition = 0;\n\n  // Reset encoders based on axis\n  if (axis == \"x\") {\n    motor1.resetRotation();\n    motor2.resetRotation();\n  }\n  else if (axis == \"y\") {\n    motor3.resetRotation();\n    motor4.resetRotation();\n  }\n  else if (axis == \"z\") {\n    motor5.resetRotation();\n    motor6.resetRotation();\n  }\n\n  while (currentPosition < distance) {\n    // Move motors\n    if (axis == \"x\") {\n      motor1.spin(forward, power, percent);\n      motor2.spin(forward, -power, percent);  // reversed in config if needed\n    }\n    else if (axis == \"y\") {\n      motor3.spin(forward, power, percent);\n      motor4.spin(forward, power, percent);\n    }\n    else if (axis == \"z\") {\n      motor5.spin(forward, power, percent);\n      motor6.spin(forward, -power, percent);  // reversed in config if needed\n    }\n\n    // Wait until intervalDistance is reached\n    float intervalPosition = 0;\n    while (intervalPosition < intervalDistance) {\n      if (axis == \"x\") {\n        intervalPosition = fabs(motor1.rotation(degrees));\n      }\n      else if (axis == \"y\") {\n        intervalPosition = fabs(motor3.rotation(degrees));\n      }\n      else if (axis == \"z\") {\n        intervalPosition = fabs(motor5.rotation(degrees));\n      }\n      wait(10, msec);  // small wait to avoid CPU overload\n    }\n\n    // Stop motors\n    if (axis == \"x\") {\n      motor1.stop();\n      motor2.stop();\n    }\n    else if (axis == \"y\") {\n      motor3.stop();\n      motor4.stop();\n    }\n    else if (axis == \"z\") {\n      motor5.stop();\n      motor6.stop();\n    }\n\n    wait(waitTime, msec);\n\n    // Update encoders and reset for next interval\n    if (axis == \"x\") {\n      motor1.resetRotation();\n      motor2.resetRotation();\n    }\n    else if (axis == \"y\") {\n      motor3.resetRotation();\n      motor4.resetRotation();\n    }\n    else if (axis == \"z\") {\n      motor5.resetRotation();\n      motor6.resetRotation();\n    }\n\n    // Accumulate total distance moved\n    currentPosition += intervalDistance;\n  }\n}\n\n\nvoid moveSensorToPosition(float currentPosition, float desiredPosition) {\n  // Only allow movement to -90, 0, or 90 degrees\n  if ((desiredPosition != -90) && (desiredPosition != 0) && (desiredPosition != 90)) {\n    return; // invalid position\n  }\n\n  // Reset encoder to align with given current position\n  motor7.resetRotation();\n  motor7.setRotation(currentPosition, degrees); // set encoder to match the input\n\n  // Calculate how far to move\n  float error = desiredPosition - currentPosition;\n\n  // Determine direction\n  if (error > 0) {\n    motor7.spin(forward, 25, percent);\n    while (motor7.rotation(degrees) < desiredPosition) {\n      wait(10, msec);\n    }\n  }\n  else if (error < 0) {\n    motor7.spin(reverse, 25, percent);\n    while (motor7.rotation(degrees) > desiredPosition) {\n      wait(10, msec);\n    }\n  }\n\n  // Stop motor once target is reached\n  motor7.stop();\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  \n}\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}