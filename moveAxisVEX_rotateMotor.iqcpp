{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Motor1 = motor(PORT1, false);\nmotor Motor2 = motor(PORT2, false);\nmotor Motor7 = motor(PORT7, false);\nmotor Motor8 = motor(PORT8, false);\nmotor Motor11 = motor(PORT11, false);\nmotor Motor12 = motor(PORT12, false);\nbumper Bumper3 = bumper(PORT3);\ndistance Distance10 = distance(PORT10);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nconst int RESOLUTION = 5; // degrees\nconst int MAX_STEPS = 5000;\nconst int INITIALIZE_SPEED = 30;\nconst int GRID_SPEED = 15;\nconst int TOLERANCE = 2; // degrees of error\nconst int POLLING = 100; // millseconds\n// requires array of size (limitx/#intervals) and (limity/#intervals) initialized outside of this\n// X is the max size of the width of the plane (degrees)\n// Y is the max size of the length of the plane (degrees)\nint generatePaths(float planePoints[MAX_STEPS][2], int stepSize, float X, float Y) {\n  int numX = floor(X/stepSize) + 1;\n  int numY = floor(Y/stepSize) + 1;\n  int index = 0;\n\n  for (int i = 0; i < numX; ++i) {\n    if (i % 2 == 0) {\n      // even row increase y (snake grid pattern)\n      for (int j = 0; j < numY; ++j) {\n        if (index < MAX_STEPS) {\n          planePoints[index][0] = i * stepSize;\n          planePoints[index][1] = j * stepSize;\n        }\n        ++index;\n      }\n    } else {\n      // odd row decrease y\n      for (int j = numY - 1; j >= 0; --j) {\n        if (index < MAX_STEPS) {\n          planePoints[index][0] = i * stepSize;\n          planePoints[index][1] = j * stepSize;\n        }\n        ++index;\n      }\n    }\n  }\n  int numPoints = (1 + X/stepSize) * (1 + Y/stepSize);\n  return numPoints;\n}\n\n// wait for bumper press, once press move all motor to lowest range set encoders to zero.\nvoid initializeEncoders(float limitSwitches[3]) {\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor1.setVelocity(INITIALIZE_SPEED, percent); // leadscrew\n    Motor2.setVelocity(INITIALIZE_SPEED, percent);\n    Motor7.setVelocity(-INITIALIZE_SPEED, percent); // baseplate\n    Motor8.setVelocity(INITIALIZE_SPEED, percent);\n    Motor11.setVelocity(INITIALIZE_SPEED, percent); // rack\n    Motor12.setVelocity(INITIALIZE_SPEED, percent);\n\n    // LEADSCREW\n    Motor1.spin(forward);\n    Motor2.spin(forward);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // set leadscrew zero\n    Motor1.stop();\n    Motor2.stop();\n    Motor1.setPosition(0, degrees);\n    Motor2.setPosition(0, degrees);\n    Motor1.spin(reverse);\n    Motor2.spin(reverse);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    \n    Motor1.stop();\n    Motor2.stop();\n\n    // BED PLATE\n    Motor7.spin(forward);\n    Motor8.spin(forward);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // set bedplate zero\n    Motor7.stop();\n    Motor8.stop();\n    Motor7.setPosition(0, degrees);\n    Motor8.setPosition(0, degrees);\n    Motor7.spin(reverse);\n    Motor8.spin(reverse);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor7.stop();\n    Motor8.stop();\n\n    // RACK AND PINION\n    Motor11.spin(reverse);\n    Motor12.spin(forward);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // set bedplate zero\n    Motor11.stop();\n    Motor12.stop();\n    Motor11.setPosition(0, degrees);\n    Motor12.setPosition(0, degrees);\n    Motor11.spin(forward);\n    Motor12.spin(reverse);\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor11.stop();\n    Motor12.stop();\n    \n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);  // move current position of printer to line 1, column 1\n    Brain.Screen.print(\"LS: %.2f deg\", Motor1.position(degrees));\n    printf(\"LS: %.2f deg\", Motor1.position(degrees));\n    Brain.Screen.setCursor(2, 1);\n    Brain.Screen.print(\"BED: %.2f deg\", Motor7.position(degrees));\n    printf(\"BED: %.2f deg\", Motor7.position(degrees));\n    Brain.Screen.setCursor(3, 1);\n    Brain.Screen.print(\"RACK: %.2f deg\", Motor11.position(degrees));\n    printf(\"RACK: %.2f deg\", Motor11.position(degrees));\n    // Leadscrew RESULT == 755 degrees (negative, going down from the top)\n    // Base RESULT == 485 degrees\n\n    // Save encoder values\n    limitSwitches[0] = Motor1.position(degrees);\n    limitSwitches[1] = Motor7.position(degrees);\n    limitSwitches[2] = Motor11.position(degrees);\n}\n\n\nfloat moveAndPCD(float sensorHeight, float xi, float yi, float xf, float yf, int power)\n{\n  if (xi == xf && yi == yf) {\n    return -1; // don't move if no motion\n  }\n\n  Motor7.setVelocity(power, percent);\n  Motor8.setVelocity(power, percent);\n  Motor11.setVelocity(power, percent);\n  Motor12.setVelocity(power, percent);\n\n  Motor7.setPosition(xi,degrees);\n  Motor11.setPosition(yi,degrees);\n  // learned from gpt\n  int x_direction = (xf != xi) ? ((xf - xi) / abs(xf - xi)) : 0;\n  int y_direction = (yf != yi) ? ((yf - yi) / abs(yf - yi)) : 0;\n\n  // X-axis motion\n  if (x_direction > 0) {\n    while (Motor7.position(degrees) < xf - TOLERANCE) {\n      Motor7.spin(forward);\n      Motor8.spin(reverse);\n    }\n  } else if (x_direction < 0) {\n    while (Motor7.position(degrees) > xf + TOLERANCE) {\n      Motor7.spin(reverse);\n      Motor8.spin(forward);\n    }\n  }\n  Motor7.stop();\n  Motor8.stop();\n\n  // Y-axis motion\n  if (y_direction > 0) {\n    while (Motor11.position(degrees) < yf - TOLERANCE) {\n      Motor11.spin(forward);\n      Motor12.spin(reverse);\n    }\n  } else if (y_direction < 0) {\n    while (Motor11.position(degrees) > yf + TOLERANCE) {\n      Motor11.spin(reverse);\n      Motor12.spin(forward);\n    }\n  }\n  Motor11.stop();\n  Motor12.stop();\n\n\n  float objectHeight = fabs(sensorHeight - Distance10.objectDistance(mm));\n\n  if (objectHeight<2) {\n    return -1;\n  }\n  else {\n\n    // if measurement was successful\n    Brain.Screen.setCursor(2,1);\n    Brain.Screen.print(\"PCD Result\");\n    Brain.Screen.setCursor(3,1);\n    Brain.Screen.print(\"%.2f %.2f %.2f\", xf, yf, objectHeight);\n    printf(\"%.2f %.2f %.2f \\n\", xf, yf, 9999-objectHeight);\n\n    return objectHeight;\n  }\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n\n\n  // Find limit switches\n  float limitSwitches[3] = {0}; //\n  // limit 0 is leadscrew, 1 is rack and pinion, 2 is bedplate, \n  initializeEncoders(limitSwitches);\n\n  // hardcode limit switches\n  float limitSwitches[3] = {200, 150, 400};\n\n  // move baseplate motors to 0\n  Motor7.spinToPosition(0, degrees, false); \n  Motor8.spinToPosition(0, degrees, false);\n\n  // move rack motors to 0\n  Motor11.spinToPosition(0, degrees, false);\n  Motor12.spinToPosition(0, degrees); \n\n\n  // get the sensor height between sensor and bed plate\n  float sensorHeight = Distance10.objectDistance(mm); // current distance between sensor and bed before object is placed\n  printf(\"Initialized distance sensor height to %f\", sensorHeight);\n  \n  // place the object\n\n  // wait until bumper is pressed\n  while (!Bumper3.pressing()) {\n      wait(10, msec);\n  }\n\n  // Wait for bumper release to debounce\n  while (Bumper3.pressing()) {\n      wait(10, msec);\n  }\n  \n  printf(\"Returned to Origin, Ready to Scan \\n\");\n\n  float XY_Path[MAX_STEPS][2] = {0};\n  float PCD[MAX_STEPS][3] = {0};\n  \n  int numValidPoints = generatePaths(XY_Path, RESOLUTION, limitSwitches[1], limitSwitches[2]);\n\n  for (int i = 0; i < numValidPoints; i++) {\n    printf(\"%f %f %f\", XY_Path[0], XY_Path[1], 0)\n  }\n\n  float currentXPos = 0, currentYPos = 0, nextXPos = 0, nextYPos = 0;\n\n  int count = 0;\n  while (count < numValidPoints - 1) {\n    currentXPos = XY_Path[count][1]; // RAHHHHHHHHH\n    currentYPos = XY_Path[count][0];\n    nextXPos = XY_Path[count+1][1];\n    nextYPos = XY_Path[count+1][0];\n    // printf(\"Moving to %f %f\\n\", nextXPos, nextYPos);\n\n    // if this is negative one, then no point was found of the object\n    float heightZPos = moveAndPCD(sensorHeight, currentXPos, currentYPos, nextXPos, nextYPos, GRID_SPEED);\n\n    if (heightZPos != -1) {\n      PCD[count][0] = nextXPos;\n      PCD[count][1] = nextYPos;\n      PCD[count][2] = heightZPos;\n\n      // printf(\"%.1f %d %.1f\\n\", nextXPos, nextYPos, heightZPos); // already printed in moveAndPCD();\n      wait(250, msec);\n    }\n    count++;\n  }\n\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1,1);\n  Brain.Screen.print(\"Completed Scan\");\n  printf(\"Completed Scan \\n\");\n\n\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"Motor2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"Motor7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"Motor8","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"Motor11","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"Motor12","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"Bumper3","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[10],"name":"Distance10","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}