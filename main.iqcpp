{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor Motor1 = motor(PORT1, false);\nmotor Motor2 = motor(PORT2, false);\nmotor Motor7 = motor(PORT7, false);\nmotor Motor8 = motor(PORT8, false);\nbumper Bumper3 = bumper(PORT3);\nmotor Motor11 = motor(PORT11, false);\nmotor Motor12 = motor(PORT12, false);\ndistance Distance6 = distance(PORT6);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {Vansh Shah}                                                  \n//    Created:      {July 20th 2025}                                                    \n//    Description:  TRAC3R VEX IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint direction = 1; // 1 = forward, -1 = reverse\nint status = 0;    // 0 = stopped, 1 = running\n\nconst int LEADSCREW_SPEED = 50;\nconst int INITIALIZE_SPEED = 20; // keep low to avoid breaking parts when hitting end range\n\n// wait for bumper press, once press move all motor to lowest range set encoders to zero.\nvoid initializeEncoders(double& leadscrewPos, double& basePos, double& rackPos) {\n\n    // wait until bumper is pressed\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n\n    // Leadscrew\n    Motor1.setVelocity(INITIALIZE_SPEED, percent);\n    Motor2.setVelocity(INITIALIZE_SPEED, percent);\n\n    // Baseplate\n    Motor7.setVelocity(-INITIALIZE_SPEED, percent);\n    Motor8.setVelocity(INITIALIZE_SPEED, percent);\n\n    // Rack\n    Motor11.setVelocity(INITIALIZE_SPEED, percent);\n    Motor12.setVelocity(INITIALIZE_SPEED, percent);\n\n    Motor1.spin(forward);\n    Motor2.spin(forward);\n    Motor7.spin(forward);\n    Motor8.spin(forward);\n    Motor11.spin(forward);\n    Motor12.spin(forward);\n\n    // wait until bumper is (again), this will indicate it has reached the first end range\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n\n    Motor1.stop();\n    Motor2.stop();\n    Motor7.stop();\n    Motor8.stop();\n    Motor11.stop();\n    Motor12.stop();\n    \n    Motor1.setPosition(0, degrees);\n    Motor2.setPosition(0, degrees);\n    Motor7.setPosition(0, degrees);\n    Motor8.setPosition(0, degrees);\n    Motor11.setPosition(0, degrees);\n    Motor12.setPosition(0, degrees);\n\n    Motor1.spin(reverse);\n    Motor2.spin(reverse);\n    Motor7.spin(reverse);\n    Motor8.spin(reverse);\n    Motor11.spin(reverse);\n    Motor12.spin(reverse);\n\n    // wait until bumper is (again), this will indicate it has reached the second end range\n    while (!Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    // Wait for bumper release to debounce\n    while (Bumper3.pressing()) {\n        wait(10, msec);\n    }\n\n    Motor1.setStopping(coast);\n    Motor2.setStopping(coast);\n    Motor7.setStopping(coast);\n    Motor8.setStopping(coast);\n    Motor11.setStopping(coast);\n    Motor12.setStopping(coast);\n\n    Motor1.stop();\n    Motor2.stop();\n    Motor7.stop();\n    Motor8.stop();\n    Motor11.stop();\n    Motor12.stop();\n    \n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);  // move current position of printer to line 1, column 1\n    Brain.Screen.print(\"LSCREW: %.2f deg\", Motor1.position(degrees));\n\n    Brain.Screen.setCursor(2, 1);\n    Brain.Screen.print(\"BASE: %.2f deg\", Motor7.position(degrees));\n\n    Brain.Screen.setCursor(3, 1);\n    Brain.Screen.print(\"RACK: %.2f deg\", Motor11.position(degrees));\n\n    // Leadscrew RESULT == 755 degrees (negative, going down from the top)\n    // Base RESULT == 485 degrees\n\n    // Save encoder values to reference variables\n    leadscrewPos = Motor1.position(degrees);\n    basePos     = Motor7.position(degrees);\n    rackPos     = Motor11.position(degrees);\n}\n\nvoid leadscrew() {\n  while (true) {\n    if (Bumper3.pressing()) {\n      if (status == 0) {\n        // Start spinning\n        Motor1.setVelocity(LEADSCREW_SPEED, percent);\n        Motor2.setVelocity(LEADSCREW_SPEED, percent);\n\n        if (direction == 1) {\n          Motor1.spin(forward);\n          Motor2.spin(forward);\n        } else {\n          Motor1.spin(reverse);\n          Motor2.spin(reverse);\n        }\n\n        status = 1; // Running\n      }\n      else if (status == 1) {\n        // Stop spinning\n        Motor1.stop();\n        Motor2.stop();\n        status = 0; // stop \n        direction *= -1; // flip direction for next start\n      }\n\n      wait(500, msec);\n    }\n\n    wait(20, msec);\n  }\n}\n\nvoid flywheel() {\n  while (true) {\n    if (Bumper3.pressing()) {\n      if (status == 0) {\n        // Start spinning\n        Motor7.setVelocity(LEADSCREW_SPEED, percent);\n        Motor8.setVelocity(LEADSCREW_SPEED, percent);\n\n        if (direction == 1) {\n          Motor7.spin(forward);\n          Motor8.spin(reverse);\n        } else {\n          Motor7.spin(reverse);\n          Motor8.spin(forward);\n        }\n\n        status = 1; // now running\n      }\n      else if (status == 1) {\n        // Stop spinning\n        Motor7.stop();\n        Motor8.stop();\n        status = 0; // stop \n        direction *= -1; // flip direction for next start\n      }\n\n      wait(500, msec); // debounce\n    }\n\n    wait(20, msec); // loop delay\n  }\n}\n\n\nvoid grind() {\n  \n  int s = 100; // speed\n  int t = 1800; // time in sec\n\n  while (1 == 1) {\n    \n    Motor1.setVelocity(s, percent);\n    Motor2.setVelocity(s, percent);\n\n    Motor1.spin(forward);\n    Motor2.spin(forward);\n\n    wait(t, msec);\n\n    Motor1.stop();\n    Motor2.stop();\n\n    wait(10, msec);\n\n    Motor1.spin(reverse);\n    Motor2.spin(reverse);\n\n    wait(t, msec);\n\n    Motor1.stop();\n    Motor2.stop();\n\n    wait(10, msec);\n\n\n  }\n\n}\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // When code starts:\n  // REQUIREMENT: sensor must have no object placed below it(only the baseplate) when code is RUN\n  // REQUIREMENT: \n    \n\n  flywheel();\n\n  // double ls, base, rack;\n\n  // initializeEncoders(ls, base, rack);\n  // wait(2000, msec);\n\n\n  // while (1 == 1) {\n  //   Brain.Screen.clearScreen();\n  //   Brain.Screen.setCursor(1, 1);\n\n  //   Brain.Screen.print(\"LS POS: %d\", Motor1.position(degrees));\n  //   Brain.Screen.setCursor(2, 1);\n\n  //   Brain.Screen.print(\"BASE POS: %d\", Motor7.position(degrees));\n  //   Brain.Screen.setCursor(3, 1);\n\n  //   Brain.Screen.print(\"RACK POS: %d\", Motor11.position(degrees));\n  //   wait(100, msec);\n\n    \n}\n","textLanguage":"cpp","robotConfig":[{"port":[1],"name":"Motor1","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"Motor2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"Motor7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"Motor8","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"Bumper3","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[11],"name":"Motor11","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"Motor12","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"Distance6","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}