{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nfloat getSensorObjectHeight(float bedDistance) {\n  // Get current distance from sensor to object\n  float currentDistance = distanceSensor.objectDistance(mm);\n  float objectHeight = bedDistance - currentDistance;\n\n  return objectHeight;\n}\n\n\n\n\n\nconst int  MAX_ROWS 15\nconst int  MAX_COLS 15\n\nfloat scanGrid[MAX_ROWS][MAX_COLS];  // Stores height at each (x, y) point\nint rows = 0; // number of y steps\nint cols = 0; // number of x steps\n\nvoid generateScanGrid2D(int xMin, int xMax, int yMin, int yMax, int resolution) {\n  // Calculate number of positions in x and y\n  cols = (xMax - xMin) / resolution + 1;\n  rows = (yMax - yMin) / resolution + 1;\n\n  // Clamp to max grid size\n  if (cols > MAX_COLS) cols = MAX_COLS;\n  if (rows > MAX_ROWS) rows = MAX_ROWS;\n\n  // Initialize all height values to 0\n  for (int i = 0; i < rows; i++) {\n    for (int j = 0; j < cols; j++) {\n      scanGrid[i][j] = 0;\n    }\n  }\n}\n\n\n\n\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  \n}\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false}